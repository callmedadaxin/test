{"version":3,"sources":["Map.js","List.js","App.js","serviceWorker.js","index.js"],"names":["BMap","window","Map","item","BMapLib","SearchInfoWindow","this","map","concat","place","title","width","height","panel","enableAutoPan","searchTypes","pos","location","point","Point","lng","lat","marker","Marker","win","addWindow","addOverlay","addEventListener","e","open","_this","data","forEach","addMarker","centerAndZoom","setCurrentCity","enableScrollWheelZoom","App","useEffect","init","addMarkers","react_default","a","createElement","id","baseUrl","List","props","_match$params","match","params","_items$list","find","list","className","src","alt","react_router_dom","react_router","path","component","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAGMA,EAAOC,OAAOD,KAEdE,oGAEMC,GAeR,OAdY,IAAIF,OAAOG,QAAQC,iBAC7BC,KAAKC,IADK,+DAAAC,OAGRL,EAAKM,MAHG,0DAKV,CACEC,MAAOP,EAAKM,MACZE,MAAO,IACPC,OAAQ,GACRC,MAAO,QACPC,eAAe,EACfC,YAAa,uCAKTZ,GACR,IAAMa,EAAMb,EAAKc,SAAWd,EAAKc,SAASA,SAAW,GAC/CC,EAAQ,IAAIlB,EAAKmB,MAAMH,EAAII,IAAKJ,EAAIK,KACpCC,EAAS,IAAItB,EAAKuB,OAAOL,GACzBM,EAAMlB,KAAKmB,UAAUtB,GAC3BG,KAAKC,IAAImB,WAAWJ,GAGpBA,EAAOK,iBAAiB,QAAS,SAASC,GACxCJ,EAAIK,KAAKP,0CAGA,IAAAQ,EAAAxB,KACXyB,EAAKC,QAAQ,SAAA7B,GACX2B,EAAKG,UAAU9B,oCAIjB,IAAII,EAAM,IAAIP,EAAKE,IAAI,aACvBK,EAAI2B,cAAc,IAAIlC,EAAKmB,MAAM,QAAS,QAAS,IACnDZ,EAAI4B,eAAe,gBACnB5B,EAAI6B,uBAAsB,GAE1B9B,KAAKC,IAAMA,WAaA8B,MATf,WAME,OALAC,oBAAU,WACR,IAAM/B,EAAM,IAAIL,EAChBK,EAAIgC,OACJhC,EAAIiC,cACH,IACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eCtDXC,EAAU,yBAED,SAASC,EAAKC,GAAO,IAAAC,EAChBD,EAAVE,MACAC,cAF0B,IAAAF,EAEjB,GAFiBA,EAAAG,EAGpBpB,EAAKqB,KAAK,SAAAjD,GAAI,OAAIA,EAAKM,QAAUyC,EAAOzC,QAC9C4C,YAJ0B,IAAAF,EAInB,GAJmBA,EAKlC,OACEV,EAAAC,EAAAC,cAAA,OAAKW,UAAU,YACZD,EAAK9C,IAAI,SAAAJ,GAAI,OACZsC,EAAAC,EAAAC,cAAA,OAAKW,UAAU,iBACbb,EAAAC,EAAAC,cAAA,OAAKY,IAAG,GAAA/C,OAAKqC,GAALrC,OAAeL,GAAQqD,IAAKrD,QCI/BkC,MAXf,WACE,OACEI,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWd,IACtCL,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAW1D,OCAf2D,QACW,cAA7B5D,OAAOgB,SAAS6C,UAEe,UAA7B7D,OAAOgB,SAAS6C,UAEhB7D,OAAOgB,SAAS6C,SAASb,MACvB,2DCZNc,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70fcd3c0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport data from \"./jsonResult.json\";\n\nconst BMap = window.BMap;\n\nclass Map {\n  // pointsMap = new Map();\n  addWindow(item) {\n    const win = new window.BMapLib.SearchInfoWindow(\n      this.map,\n      `<a href=\"https://callmedadaxin.github.io/test-/build/?place=${\n        item.place\n      }\">点击查看图片列表</a>`,\n      {\n        title: item.place, //标题\n        width: 290, //宽度\n        height: 40, //高度\n        panel: \"panel\", //检索结果面板\n        enableAutoPan: true, //自动平移\n        searchTypes: []\n      }\n    );\n    return win;\n  }\n  addMarker(item) {\n    const pos = item.location ? item.location.location : {};\n    const point = new BMap.Point(pos.lng, pos.lat);\n    const marker = new BMap.Marker(point);\n    const win = this.addWindow(item);\n    this.map.addOverlay(marker);\n    // this.pointsMap.set(marker, win);\n\n    marker.addEventListener(\"click\", function(e) {\n      win.open(marker);\n    });\n  }\n  addMarkers() {\n    data.forEach(item => {\n      this.addMarker(item);\n    });\n  }\n  init() {\n    var map = new BMap.Map(\"container\"); // 创建Map实例\n    map.centerAndZoom(new BMap.Point(116.404, 39.915), 11); // 初始化地图,设置中心点坐标和地图级别\n    map.setCurrentCity(\"北京\"); // 设置地图显示的城市 此项是必须设置的\n    map.enableScrollWheelZoom(true);\n\n    this.map = map;\n  }\n}\n\nfunction App() {\n  useEffect(() => {\n    const map = new Map();\n    map.init();\n    map.addMarkers();\n  }, []);\n  return <div id=\"container\" />;\n}\n\nexport default App;\n","import React from \"react\";\nimport data from \"./jsonResult.json\";\n\nconst baseUrl = \"http://cert-chain.com/\";\n\nexport default function List(props) {\n  const { match } = props;\n  const { params = {} } = match;\n  const items = data.find(item => item.place === params.place);\n  const { list = [] } = items;\n  return (\n    <div className=\"img-list\">\n      {list.map(item => (\n        <div className=\"img-list-item\">\n          <img src={`${baseUrl}${item}`} alt={item} />\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\n// import { Map, Marker, NavigationControl, InfoWindow } from \"react-bmap\";\nimport \"./App.css\";\nimport Map from \"./Map\";\nimport List from \"./List\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/list/:place\" component={List} />\n        <Route path=\"/\" component={Map} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}